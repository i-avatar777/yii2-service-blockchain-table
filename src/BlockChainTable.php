<?php

namespace iAvatar777\service\BlockchainTable;


/**
 * Class BlockChainTable
 *
 * @property string _hash_row
 *
 * @package iAvatar777\service\BlockchainTable
 */
class BlockChainTable extends \yii\db\ActiveRecord
{
    public function save($runValidation = true, $attributeNames = null)
    {
        $isNewRecord = $this->isNewRecord;
        // Сохраняю транзакицю
        $table = Table::findOne(['name' => self::tableName()]);
        if (is_null($table)) {
            $table = new Table(['name' => self::tableName()]);
        }
        $result = parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        $this->id = self::getDb()->lastInsertID;

        if ($isNewRecord) {
            $this->_hash_row = $this->calculateHash();
        }
        $this->save();

        $t = new Transaction([
            'row_id'     => $this->id,
            'table_id'   => $table->id,
            'hash'       => $this->_hash_row,
            'created_at' => (int)(microtime(true) * 1000),
        ]);
        $t->save();

        return $result;
    }

    public function calculateHash()
    {
        $fields = self::getDb()->schema->getTableSchema(self::tableName());
        $data = [];
        $row = '';
        /**
         * @var string $key
         * @var \yii\db\mysql\ColumnSchema $column
         */
        foreach ($fields['columns'] as $key => $column) {
            if ($key != '_hash_row') {
                $type = $column->phpType;
                switch ($type) {
                    case 'string':
                    case 'integer':
                        $value = $data[$key];
                        break;
                    case 'double':
                        $value = (int) ($data[$key]);
                        break;
                    case 'array':
                        throw new \Exception('array не поддерживается пока');
                        break;
                    case 'boolean':
                        throw new \Exception('boolean не поддерживается пока');
                        break;
                    default:
                        throw new \Exception('неизвестный тип данных не поддерживается пока');
                        break;
                }
                $row .= $value;
            }
        }

        return hash('sha256', $row);
    }

    /**
     * расчитывает хеш при помощи `calculateHash` и сравнивает с полем `_hash_row`
     *
     * @return bool
     */
    public function isValid()
    {
        return $this->calculateHash() == $this->_hash_row;
    }
}